apply plugin: 'ssh'
apply plugin: 'war'

version = '1.0 SNAPSHOT'

repositories {
   mavenCentral() 
   }
   dependencies {
   	classpath 'org.hidetake:gradle-ssh-plugin:0.1.7'
   }                                              
}

war {
	archiveName = 'ROOT.war'
}

dependencies {
	providedCompile 'javax.servlet:servlet-api:2.5'
	compile 'com.google.code.gson:gson:2.2.4'
	compile 'org.glassfish.hk2.external:asm-all-repackaged:2.4.0-b06'
    compile 'com.google.guava:guava:18.0'
    compile 'org.glassfish.hk2:hk2:2.3.0-b10'
    compile 'org.codehaus.jackson:jackson-core-asl:1.9.2'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.2'
    compile 'org.codehaus.jackson:jackson-jaxrs:1.9.2'
    compile 'org.jasypt:jasypt:1.9.2'
    compile 'org.javassist:javassist:3.18.1-GA'
    compile 'com.intellij:annotations:12.0'
    compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
   	compile 'org.glassfish.jersey.core:jersey-client:2.5.1'
   	compile 'org.glassfish.jersey.core:jersey-common:2.5.1'
   	compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.5.1'
   	compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.5.1'
   	compile 'org.glassfish.jersey.bundles.repackaged:jersey-guava:2.12'
   	compile 'org.glassfish.jersey.core:jersey-server:2.5.1'
   	compile 'joda-time:joda-time:2.3'
   	compile 'com.googlecode.json-simple:json-simple:1.1.1'
   	compile 'org.mongodb:mongo-java-driver:2.12.2'
   	compile 'org.mongodb.morphia:morphia:0.108'
   	compile 'javax.validation:validation-api:1.1.0.Final'
   	compile 'javax.annotation:javax.annotation-api:1.2'
   			
    runtime 'javax.servlet:jstl:1.1.2'
    
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

ssh {
	config(StrictHostKeyChecking: 'no')
}

remotes {
	testserver {
		host = '41.185.26.135'
		user = root
		identity = file("${System.properties['user.home']}/.ssh/id_dsa")
	}
}

task deployTestServer << {
	deploy(remotes.testserver)
}

deployTestServer.dependsOn build
 
def deploy(def server) {
	logger.lifecycle("Deploying to $server")
	logger.lifecycle("Copying ${war.archivePath.absolutePath} to $server ... Be patient .. takes time ...")
sshexec {
	session(server) {
	put(war.archivePath.absolutePath, war.archiveName)
}
}
	sshexecute(server, '/usr/share/tomcat7/bin/tomcat7 stop')
	sshexecute(server, 'rm -rf /var/lib/tomcat7/webapps/rest*')
	sshexecute(server, "cp ${war.archiveName}  /var/lib/tomcat7/webapps")
	sshexecute(server, '/usr/share/tomcat7/bin/tomcat7 start')
	sshexecute(server, '/usr/share/tomcat7/bin/tomcat7 status')
}
 
def sshexecute(def server, def cmd) {
	logger.lifecycle("Executing '$cmd'  ...")
	sshexec {
		session(server) {
		execute(cmd, pty: true)
	}
}